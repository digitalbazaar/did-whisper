#!/usr/bin/env node
const yargs = require('yargs');
const getStdin = require('get-stdin');

const whisper = require('../lib/index');

const DEFAULT_URL = 'http://localhost:5000';

yargs
  .usage('$0 <cmd> [args]')

  .help('h')

  .alias('h', 'help')

  .demandCommand(1, 'Please specify a command')

  .option('e', {
    alias: 'expiration',
    type: 'string',
    describe: 'expire encrypted message in',
    choices: ['5m', '1h', '1d', '1w'],
    default: '1w'
  })

  .option('s', {
    alias: 'store',
    type: 'string',
    describe: 'url or server running a did-whisper-server instance',
    default: DEFAULT_URL
  })

  .option('n', {
    alias: 'no-store',
    type: 'boolean',
    describe: 'do not store encrypted message, output to stdout instead',
    default: false
  })

  .command(
    'encrypt <did> [message] [options]',
    "encrypt an anonymous message for the recipient's DID and save it to a whisper store",
    yargs => {
      yargs
        .positional('did', {
          describe: 'DID of recipient',
          type: 'string'
        })
        .positional('message', {
          describe: 'message to be encrypted',
          type: 'string'
        });
    },
    argv => {
      Promise.resolve()
        .then(() => argv.message || getStdin())

        .then(message => whisper.encryptForDid(argv.did, message,
          argv.expiration))

        .then(encrypted => {
          return argv['no-store']
            ? encrypted.cipher
            : whisper.saveMessage(encrypted, argv.store);
        })

        .then(console.log) // display the resulting tiny url or cipher text

        .catch(console.error);
    }
  )

  .command(
    'decrypt <url> [message]',
    'decrypt a message intended for the DID',
    yargs => {
      yargs
        .positional('url', {
          describe: 'saved message URL, or DID of recipient',
          type: 'string'
        })
        .positional('message', {
          describe: 'optional raw ciphertext of message to be decrypted',
          type: 'string',
          optional: true
        });
    },
    argv => {
      Promise.resolve()
        .then(() => argv.message || getStdin())

        .then(cipher => whisper.decrypt(argv.url, cipher))

        .then(message => {
          console.log(message.toString());
        })

        .catch(console.error);
    }
  );

yargs.argv;
